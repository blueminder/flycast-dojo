name: C/C++ CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      matrix:
        config:
          - {name: apple-darwin, os: macos-latest, cmakeArgs: -DCMAKE_OSX_ARCHITECTURES=x86_64 -DWITH_SYSTEM_ZLIB=ON -DCURL_ZLIB=OFF -DCPR_BUILD_TESTS=OFF -DCPR_BUILD_TESTS_SSL=OFF -G "Xcode", destDir: osx, buildType: Release}
          - {name: x86_64-pc-linux-gnu, os: ubuntu-latest, destDir: linux, buildType: RelWithDebInfo}
          - {name: x86_64-w64-mingw32, os: windows-latest, cmakeArgs: -DWITH_SYSTEM_ZLIB=ON -DCURL_ZLIB=OFF -DCPR_FORCE_OPENSSL_BACKEND=ON -DCPR_BUILD_TESTS=OFF -DCPR_BUILD_TESTS_SSL=OFF -G "MinGW Makefiles", destDir: win, buildType: RelWithDebInfo}

    steps:
      - name: Set up build environment (macos-latest)
        run: |
          brew install ccache libao libomp pulseaudio zlib ldid asio gnutls lua
          curl https://sdk.lunarg.com/sdk/download/1.2.189.0/mac/vulkansdk-macos-1.2.189.0.dmg --output vulkansdk-macos-1.2.189.0.dmg
          hdiutil attach ./vulkansdk-macos-1.2.189.0.dmg
          pushd /Volumes/vulkansdk-macos-1.2.189.0
          sudo ./InstallVulkan.app/Contents/MacOS/InstallVulkan --root ~/VulkanSDK/1.2.189.0 --accept-licenses --default-answer --confirm-command install
          popd
          echo "VULKAN_SDK=$HOME/VulkanSDK/1.2.189.0/macOS" >> $GITHUB_ENV
          echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
          echo "CCACHE_DIR=/tmp/ccache" >> $GITHUB_ENV
        if: matrix.config.os == 'macos-latest'

      - name: Set up build environment (ubuntu-latest)
        run: |
          sudo apt-get update
          sudo apt-get -y install ccache libao-dev libasound2-dev libevdev-dev libgl1-mesa-dev libpulse-dev libsdl2-dev libudev-dev libzip-dev libminiupnpc-dev liblua5.3-dev libasio-dev wget zip libcurl4-gnutls-dev
          echo "CCACHE_DIR=/tmp/ccache" >> $GITHUB_ENV
        if: matrix.config.os == 'ubuntu-latest'

      - name: Set up build environment (windows-2019)
        run: echo "DXSDK_DIR=${Env:HOMEDRIVE}${Env:HOMEPATH}\ccache\" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
        if: matrix.config.os == 'windows-2019' && matrix.config.name != 'libretro-x86_64-w64-mingw32'

      - uses: actions/cache@v2
        with:
          path: /tmp/ccache
          key: ccache-${{ matrix.config.os }}-${{ github.sha }}
          restore-keys: ccache-${{ matrix.config.os }}-
        if: matrix.config.os != 'windows-2019'

      - uses: actions/cache@v2
        id: cache
        with:
          path: $HOME/ccache
          key: ccache-${{ matrix.config.os }}-${{ github.sha }}
          restore-keys: ccache-${{ matrix.config.os }}-
        if: matrix.config.os == 'windows-2019'

      - name: Download DX2010
        if: matrix.config.os == 'windows-2019' && matrix.config.name != 'libretro-x86_64-w64-mingw32'
        run:   |
               curl -L https://download.microsoft.com/download/a/e/7/ae743f1f-632b-4809-87a9-aa1bb3458e31/DXSDK_Jun10.exe -o _DX2010_.exe
               7z x _DX2010_.exe DXSDK/Include -o_DX2010_
               7z x _DX2010_.exe DXSDK/Lib/x86 -o_DX2010_
               7z x _DX2010_.exe DXSDK/Lib/x64 -o_DX2010_
               mv _DX2010_/DXSDK $HOME/ccache
               rm -fR _DX*_ _DX*_.exe
        shell: bash

      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: git base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-breakpad-git mingw-w64-x86_64-lua mingw-w64-x86_64-asio wget zip
        if: endsWith(matrix.config.name, 'w64-mingw32')

      - name: Downgrade gcc to 10.3
        run: |
          pacman -U --noconfirm https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-gcc-libs-10.3.0-8-any.pkg.tar.zst https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-gcc-10.3.0-8-any.pkg.tar.zst https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-gcc-ada-10.3.0-8-any.pkg.tar.zst https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-gcc-fortran-10.3.0-8-any.pkg.tar.zst https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-gcc-libgfortran-10.3.0-8-any.pkg.tar.zst https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-gcc-objc-10.3.0-8-any.pkg.tar.zst https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-libgccjit-10.3.0-8-any.pkg.tar.zst
          pacman -U --noconfirm https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-crt-git-9.0.0.6246.ae63cde27-1-any.pkg.tar.zst https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-headers-git-9.0.0.6246.ae63cde27-1-any.pkg.tar.zst https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-libmangle-git-9.0.0.6246.ae63cde27-1-any.pkg.tar.zst https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-libwinpthread-git-9.0.0.6246.ae63cde27-1-any.pkg.tar.zst https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-tools-git-9.0.0.6246.ae63cde27-1-any.pkg.tar.zst https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-winpthreads-git-9.0.0.6246.ae63cde27-1-any.pkg.tar.zst https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-winstorecompat-git-9.0.0.6246.ae63cde27-1-any.pkg.tar.zst
          pacman -U --noconfirm https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-cmake-3.20.5-2-any.pkg.tar.zst
        shell: msys2 {0}
        if: endsWith(matrix.config.name, 'w64-mingw32')

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: CMake
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.buildType }} -DCMAKE_INSTALL_PREFIX=artifact ${{ matrix.config.cmakeArgs }}
          cmake --build build --config ${{ matrix.config.buildType }} --parallel 2
          cmake --build build --config ${{ matrix.config.buildType }} --target install
        if: endsWith(matrix.config.name, 'w64-mingw32') != true

      - name: CMake (windows)
        shell: msys2 {0}
        run: |
          unset temp tmp
          cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.buildType }} -DCMAKE_INSTALL_PREFIX=artifact ${{ matrix.config.cmakeArgs }}
          cmake --build build --config ${{ matrix.config.buildType }} --parallel 2
          cmake --build build --config ${{ matrix.config.buildType }} --target install
        if: endsWith(matrix.config.name, 'w64-mingw32')

      # - name: Unit Tests
      #   run: |
      #     mkdir -p build/tests
      #     cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.buildType }} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=tests -DENABLE_CTEST=ON ${{ matrix.config.cmakeArgs }}
      #     cmake --build build --config Release --parallel 2
      #     ./build/tests/flycast
      #   if: matrix.config.name == 'x86_64-pc-linux-gnu'

      - name: Install breakpad (linux)
        working-directory: core/deps/breakpad
        run: |
          ./configure
          make
          sudo make install
        if: matrix.config.os == 'ubuntu-latest'

      - name: Dump symbols (linux)
        shell: bash
        run: |
          dump_syms artifact/bin/flycast > flycast.elf.sym 2>/dev/null
          BUILD_ID=`head -1 flycast.elf.sym | awk '{ print $4 }'`
          mkdir -p symbols/flycast.elf/$BUILD_ID
          mv flycast.elf.sym symbols/flycast.elf/$BUILD_ID
          strip artifact/bin/flycast
        if: matrix.config.os == 'ubuntu-latest'

      - name: Dump symbols (windows)
        shell: msys2 {0}
        run: |
          core/deps/breakpad/bin/dump_syms artifact/bin/flycast.exe > flycast.exe.sym 2>/dev/null
          BUILD_ID=`head -1 flycast.exe.sym | awk '{ print $4 }'`
          mkdir -p symbols/flycast.exe/$BUILD_ID
          mv flycast.exe.sym symbols/flycast.exe/$BUILD_ID
          strip artifact/bin/flycast.exe
        if: matrix.config.name == 'x86_64-w64-mingw32'

      - name: Package app (macos)
        run: |
          cd artifact/bin
          zip -rm flycast.app.zip "Flycast Dojo.app"
        if: matrix.config.name == 'apple-darwin'

      - name: Package app (linux)
        shell: bash
        run: |
          CURRENT_VERSION=flycast-`cat core/version.h | awk 'NR==3 { print $3 }' | tr -d '"' | tr -d '\r'`
          cd artifact/bin
          mkdir $CURRENT_VERSION
          mv flycast $CURRENT_VERSION/flycast.elf
          cd $CURRENT_VERSION
          wget https://github.com/blueminder/flycast-netplay-nvmem/archive/master.tar.gz
          tar zxvf master.tar.gz
          rm master.tar.gz
          mv flycast-netplay-nvmem-master/ default/
          rm default/README.md
          zip -r default.zip default/*
          mv default data
          mv default.zip data/
          mkdir replays
          mkdir ROMs
          wget https://raw.githubusercontent.com/blueminder/flycast-dojo/master/flycast_roms.json
          cd ..
          tar czvf linux-$CURRENT_VERSION.tar.gz $CURRENT_VERSION/* --remove-files
        if: matrix.config.os == 'ubuntu-latest'

      - name: Package app (windows)
        shell: msys2 {0}
        run: |
          CURRENT_VERSION=flycast-`cat core/version.h | awk 'NR==3 { print $3 }' | tr -d '"' | tr -d '\r'`
          cd artifact/bin
          mkdir $CURRENT_VERSION
          mv flycast.exe $CURRENT_VERSION/flycast.exe
          cd $CURRENT_VERSION
          cp /mingw64/bin/{zlib1.dll,libssl-1_1-x64.dll,libssh2-1.dll,libcrypto-1_1-x64.dll} .
          wget https://github.com/blueminder/flycast-netplay-nvmem/archive/master.tar.gz
          tar zxvf master.tar.gz
          rm master.tar.gz
          mv flycast-netplay-nvmem-master/ default/
          rm default/README.md
          zip default.zip default/*
          mv default data
          mv default.zip data/
          mkdir replays
          mkdir ROMs
          wget https://raw.githubusercontent.com/blueminder/flycast-dojo/master/flycast_roms.json
          cd ..
          zip -r $CURRENT_VERSION.zip $CURRENT_VERSION/*
          rm -rf $CURRENT_VERSION
        if: matrix.config.name == 'x86_64-w64-mingw32'

      - uses: actions/upload-artifact@v2
        with:
          name: flycast-dojo-${{ matrix.config.name }}
          path: artifact/bin

      - name: Configure AWS Credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: AKIAVELCV4MJ6TL7JA7F
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          aws-region: us-east-2
        if: github.repository == 'blueminder/flycast-dojo' && github.event_name == 'push' && matrix.config.destDir != ''

      - name: Upload to S3
        run: aws s3 sync artifact/bin s3://flycast-dojo-builds/${{ matrix.config.destDir }}/${GITHUB_REF#refs/}-$GITHUB_SHA --acl public-read --follow-symlinks
        shell: bash
        if: ${{ steps.aws-credentials.outputs.aws-account-id != '' }}

      - name: Upload symbols to S3
        run: aws s3 sync symbols s3://flycast-dojo-symbols/${{ matrix.config.destDir }} --follow-symlinks
        if: ${{ steps.aws-credentials.outputs.aws-account-id != '' && (matrix.config.os == 'windows-latest' || matrix.config.os == 'ubuntu-latest') }}
